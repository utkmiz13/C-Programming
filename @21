
Class 21 – Command Line Arguments in C (Questions and Answers)


---

1. What are command line arguments in C?
Command line arguments are parameters passed to a program when it is executed from the command prompt or terminal.


---

2. How are command line arguments accessed in C?
By using the parameters of main():

int main(int argc, char *argv[])

argc – argument count

argv – argument vector (array of strings)



---

3. What is argc?
argc is an integer that stores the number of arguments passed to the program, including the program name.


---

4. What is argv?
argv is an array of strings (character pointers) that stores all the command line arguments.


---

5. What is the value of argv[0]?
argv[0] stores the name of the program.


---

6. Write a program to print all command line arguments.

#include <stdio.h>
int main(int argc, char *argv[]) {
    for(int i = 0; i < argc; i++)
        printf("Argument %d: %s\n", i, argv[i]);
    return 0;
}

Output (if run as ./a.out hello world):

Argument 0: ./a.out
Argument 1: hello
Argument 2: world


---

7. How do you convert a command line argument to an integer?
Use atoi() from stdlib.h:

int x = atoi(argv[1]);


---

8. Write a program to add two numbers from command line arguments.

#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
    int a = atoi(argv[1]);
    int b = atoi(argv[2]);
    printf("Sum = %d", a+b);
    return 0;
}

Output (if run as ./a.out 10 20): Sum = 30


---

9. Can command line arguments pass strings?
Yes, all command line arguments are passed as strings.


---

10. How do you convert a command line argument to float?
Use atof() from stdlib.h:

float f = atof(argv[1]);


---

11. Write a program to multiply two floating point numbers from command line.

#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
    float a = atof(argv[1]);
    float b = atof(argv[2]);
    printf("Product = %.2f", a*b);
    return 0;
}

Output (if run as ./a.out 2.5 4.0): Product = 10.00


---

12. Can a program have no command line arguments?
Yes, if run without arguments, argc = 1 and argv[0] stores the program name.


---

13. Can you pass multiple words as a single argument?
Yes, by enclosing them in quotes:

./a.out "Hello World"


---

14. How do you check if the required arguments are passed?
Check the value of argc:

if(argc < 3) {
    printf("Not enough arguments");
    return 1;
}


---

15. Can command line arguments be used in loops?
Yes, you can iterate over argv array using a loop.


---

16. Write a program to concatenate two strings from command line arguments.

#include <stdio.h>
#include <string.h>
int main(int argc, char *argv[]) {
    char str[100];
    strcpy(str, argv[1]);
    strcat(str, argv[2]);
    printf("Concatenated = %s", str);
    return 0;
}

Output (if run as ./a.out Hello World): Concatenated = HelloWorld


---

17. What is the difference between argc and argv?

argc – integer, counts arguments

argv – array of strings, stores arguments



---

18. Can command line arguments be used for file names?
Yes, you can pass filenames as arguments to read/write files.


---

19. Write a program to open a file whose name is passed as command line argument.

#include <stdio.h>
int main(int argc, char *argv[]) {
    FILE *fp = fopen(argv[1], "r");
    if(fp == NULL) {
        printf("File not found");
        return 1;
    }
    printf("File opened successfully");
    fclose(fp);
    return 0;
}


---

20. Advantages of using command line arguments

Allows dynamic input without recompiling

Useful for automation scripts

Can pass filenames, numbers, or text easily

Helps in batch processing
